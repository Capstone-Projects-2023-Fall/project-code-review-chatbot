"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[334],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(r),f=n,h=p["".concat(c,".").concat(f)]||p[f]||u[f]||o;return r?a.createElement(h,i(i({ref:t},d),{},{components:r})):a.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3942:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:5},i="Database Diagram",s={unversionedId:"system-architecture/database-diagram",id:"system-architecture/database-diagram",title:"Database Diagram",description:"The following figure shows the entity relationship and table design of the database for the server. Users will be stored in the users table using a unique identifier generated. Whenever a user receives a response from ChatGPT, the response will be stored in the log_data table along with the with the git diff/hash of the file being reviewed if possible.",source:"@site/docs/system-architecture/database-diagram.md",sourceDirName:"system-architecture",slug:"/system-architecture/database-diagram",permalink:"/project-code-review-chatbot/docs/system-architecture/database-diagram",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-code-review-chatbot/edit/main/documentation/docs/system-architecture/database-diagram.md",tags:[],version:"current",lastUpdatedBy:"Yoonjae Jason Lee",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Backend Class Diagram",permalink:"/project-code-review-chatbot/docs/system-architecture/BackendDiagram"},next:{title:"API Specification",permalink:"/project-code-review-chatbot/docs/category/api-specification"}},c={},l=[],d={toc:l};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"database-diagram"},"Database Diagram"),(0,n.kt)("iframe",{width:"560",height:"315",src:"https://dbdiagram.io/embed/6511acfaffbf5169f07566e8"}," "),(0,n.kt)("p",null,"The following figure shows the entity relationship and table design of the database for the server. Users will be stored in the users table using a unique identifier generated. Whenever a user receives a response from ChatGPT, the response will be stored in the log_data table along with the with the git diff/hash of the file being reviewed if possible."),(0,n.kt)("p",null,"Many of the other tables are created for authentication, including oauth_access_tokens, oauth_auth_codes, oauth_clients, oauth_personal_access_clients, oauth_refresh_tokens, password_reset_tokens, password_resets, personal_access_tokens, and sessions."),(0,n.kt)("p",null,"There are two more tables focused around Laravel, which are the migrations table (for whenever tables are migrated into the Database), and failed_jobs (report any failed jobs)."))}p.isMDXComponent=!0}}]);