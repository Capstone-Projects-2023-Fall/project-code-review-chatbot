"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1270],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,a[1]=o;for(var u=2;u<s;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const s={sidebar_position:1},a="Unit tests",o={unversionedId:"testing/unit-testing",id:"testing/unit-testing",title:"Unit tests",description:"For each method, one or more test cases.",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-code-review-chatbot/docs/testing/unit-testing",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-code-review-chatbot/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"yoonjaejasonlee",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-code-review-chatbot/docs/category/test-procedures"},next:{title:"Integration tests",permalink:"/project-code-review-chatbot/docs/testing/integration-testing"}},l={},u=[{value:"Front End",id:"front-end",level:2},{value:"Setting Authentication Info",id:"setting-authentication-info",level:3},{value:"Resetting Conversation",id:"resetting-conversation",level:3},{value:"gets settings",id:"gets-settings",level:3},{value:"Search Functionality",id:"search-functionality",level:3},{value:"set settings",id:"set-settings",level:3},{value:"Back End",id:"back-end",level:2},{value:"function test_suggestions_table_count_is_0()",id:"function-test_suggestions_table_count_is_0",level:3},{value:"function test_is_user_missing()()",id:"function-test_is_user_missing",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"unit-tests"},"Unit tests"),(0,r.kt)("p",null,"For each method, one or more test cases."),(0,r.kt)("p",null,"A test case consists of input parameter values and expected results."),(0,r.kt)("p",null,"All external classes should be stubbed using mock objects."),(0,r.kt)("h2",{id:"front-end"},"Front End"),(0,r.kt)("h3",{id:"setting-authentication-info"},"Setting Authentication Info"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Test setting of API key",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input / User Action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"API Key is set by user or server"))),(0,r.kt)("li",{parentName:"ul"},"Expected Result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"setAuthenticationInfo() is called once with a parameter representing API key")))))),(0,r.kt)("h3",{id:"resetting-conversation"},"Resetting Conversation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reset conversation between user and ChatGPT",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input / User Action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"User requests that previous interactions with ChatGPT are forgotten"))),(0,r.kt)("li",{parentName:"ul"},"Expected Result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"resetConversation() is called once, causing the conversation to be reset")))))),(0,r.kt)("h3",{id:"gets-settings"},"gets settings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Retreival of user settings",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input / User Action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Extension is able to find user settings to adjust to user's preferences"))),(0,r.kt)("li",{parentName:"ul"},"Expected Result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"getSettings() is called once and retreives the user's settings")))))),(0,r.kt)("h3",{id:"search-functionality"},"Search Functionality"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input user's code with parameters to elicit a certain kind of response out of ChatGPT",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input / User Action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Code is sent to ChatGPT with a prompt to provoke a specific response"))),(0,r.kt)("li",{parentName:"ul"},"Expected Result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"search() is called once")))))),(0,r.kt)("h3",{id:"set-settings"},"set settings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Save cahnges user has made to settings within the extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input / User Action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"User's settings are saved to the extension"))),(0,r.kt)("li",{parentName:"ul"},"Expected Result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"setSettings() is called once with a parameter that contains info on changes made to settings")))))),(0,r.kt)("h2",{id:"back-end"},"Back End"),(0,r.kt)("h3",{id:"function-test_suggestions_table_count_is_0"},"function test_suggestions_table_count_is_0()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Test: Checks if the suggestions table has a count of 0"),(0,r.kt)("li",{parentName:"ul"},"Returns: True if there are no entries in the suggestions table")),(0,r.kt)("h3",{id:"function-test_is_user_missing"},"function test_is_user_missing()()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Test: If a specific user is missing from the suggestions table"),(0,r.kt)("li",{parentName:"ul"},"Returns: True if the specified user_id is not found as an entry within the suggestions table")))}p.isMDXComponent=!0}}]);